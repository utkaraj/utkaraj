Example Script:-
------------------------------------------------------------
#!/bin/bash
# A simple demonstration script
# Satyen 30/10/2018
 
echo Here are the files in your current directory:
ls
------------------------------------------------------------

#!  --> shebang
/bin/bash --> Interpreter
#  --> Comment
echo --> printing text of var's value
ls --> commmand


A script must have the execute permission before it may be run. Here I am just demonstrating that the file does have the right permissions..

Now we run the script. Will see why we need the ./ a bit further.



---The Shebang
The very first line of a script should tell the system which interpreter should be used on this file. It is important that this is the very first line of the script. It is also important that there are no spaces. The first two characters #! (the shebang) tell the system that directly after it will be a path to the interpreter to be used. If we don't know where our interpreter is located then we may use a program called which to find out.

	which <program>
	
	$ which bash
	$ which ls


If we leave this line out then our Bash script may still work. Most shells (bash included) will assume they are the interpreter if one is not specified. It is good practice to always include the interpreter however. Later on, you, or someone else, may run your script in conditions under which bash is not the shell currently in use and this could lead to undesireable outcomes.



----Why the ./ ?
Linux is set up the way it is, largely for logical reasons. This peculiarity actually makes the system a bit safer for us. First a bit of background knowledge. When we type a command on the command line, the system runs through a preset series of directories, looking for the program we specified. We may find out these directories by looking at a particular variable PATH (more on these in the next section).

The system will look in the first directory and if it finds the program it will run it, if not it will check the second directory and so on. Directories are separated by a colon ( : ).

The system will not look in any directories apart from these, it won't even look in your current directory. We can override this behaviour however by supplying a path. When we do so the system effectively says "Ah, you've told me where to look to find the script so I'll ignore the PATH and go straight to the location you've specified instead." You'll remember from section 2 (Basic Navigation) that a full stop ( . ) represents our current directory, so when we say ./myscript.sh we are actually tellling the system to look in our current directory to find the script. We could have used an absolute path as well ( /home/Satyen/linuxtutorialwork/myscript.sh ) and it would have worked exactly the same, or a relative path if we are not currently in the same directory as the script ( ../linuxtutorialwork/myscript.sh ).

If it were possible to run scripts in your current directory without this mechanism then it would be easy, for instance, for someone to create a malicious script in a particular directory and name it ls or something similar. People would inadventently run it if they wanted to see what was in that directory.


A script must have the execute permission before we may run it (even if we are the owner of the file). For safety reasons, you don't have execute permission by default so you have to add it. A good command to run to ensure your script is set up right is:- 

	chmod 755 <script>


---Variables
A variable is a container for a simple piece of data. They are useful if we need to work out a particular thing and then use it later on. Variables are easy to set and refer to but they have a specific syntax that must be followed exactly for them to work.

When we set a variable, we specify it's name, followed directly by an equals sign ( = ) followed directly by the value. (So, no spaces on either side of the = sign.)
When we refer to a variable, we must place a dollar sign ( $ ) before the variable name.


---Command line arguments and More
When we run a script, there are several variables that get set automatically for us. Here are some of them:

$0 - The name of the script.
$1 - $9 - Any command line arguments given to the script. $1 is the first argument, $2 the second and so on.
$# - How many command line arguments were given to the script.
$* - All of the command line arguments.	



Example:-
	
#!/bin/bash
# A simple demonstration of variables
# Satyen 30/10/2018
 
echo App name is $0 and I have been given $# command line arguments
echo Here they are: $*
echo And the 2nd command line argument is $2



Run:-
	
	$ ./myapp.sh satyen vicky dinesh



---Back ticks

It is also possible to save the output of a command to a variable and the mechanism we use for that is the backtick ( ` ) (Note it is a backtick not a single quote. Typically you'll find the backtick on the keybard to the left of the 1 (one) key.). Here is an example.

Example:-

#!/bin/bash
# A simple demonstration of using backticks
# Satyen 30/10/2018
 
lines=`cat $1 | wc -l`
echo The number of lines in the file $1 is $lines




---A Sample Backup Script

Let's do something useful. I keep all my projects in separate directories within a directory called projects in my home directory. I regularly take a backup of these projects and keep them in dated folders within a directory called projectbackups also in my home directory.

Example:-

#!/bin/bash
# Backs up a single project directory
# Satyen 30/10/2018
 
date=`date +%F`
mkdir ~/projectbackups/$1_$date
cp -R ~/projects/$1 ~/projectbackups/$1_$date
echo Backup of $1 completed



Execute:-
	$ ./projectbackup.sh schlumberger


You'll notice that I have used relative paths in the above script. By doing this I have made the script more generic. If one of my workmates wished to use it I could give them a copy and it would work just as well for them without modification. You should always think about making your scripts flexible and generic so they may easily be used by other users or adapted to similar situations. The more reusable your scripts are, the more time goes on, the less work you have to do :)


---If Statements

So the above backup script makes my life a little easier, but what if I make a mistake? The script may fall over in a mess of error messages. In the example below I will introduce if statements. I'll only touch on them briefly. You should be able to work out their usage from the example and notes below. If you would like to know more then check out our Bash Scripting Tutorial which goes into much more detail.


Example:-

#!/bin/bash
# Backs up a single project directory
# Ryan 30/10/2018
 
if [ $# != 1 ]
then
    echo Usage: A single argument which is the directory to backup
    exit
fi
if [ ! -d ~/projects/$1 ]
then
    echo 'The given directory does not seem to exist (possible typo?)'
    exit
fi
date=`date +%F`
 
# Do we already have a backup folder for todays date?
if [ -d ~/projectbackups/$1_$date ]
then
    echo 'This project has already been backed up today, overwrite?'
    read answer
    if [ $answer != 'y' ]
    then
        exit
    fi
else
    mkdir ~/projectbackups/$1_$date
fi
cp -R ~/projects/$1 ~/projectbackups/$1_$date
echo Backup of $1 completed
































